// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/24/2018 08:07:39"
                                                                                
// Verilog Test Bench template for design : Crossbar
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 100 ps
module Crossbar_vlg_tst();
// constants
parameter count = 2;
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg master_req [count - 1:0];
reg master_cmd [count - 1:0];
reg slave_ack [count - 1:0];
reg[31:0] master_addr [count - 1:0];
reg[31:0] master_wdata [count - 1:0];
reg[31:0] slave_rdata [count - 1:0];
// wires                                               
wire master_ack [count - 1:0];
wire slave_cmd [count - 1:0];
wire[31:0] master_rdata [count - 1:0];
wire[31:0] slave_addr [count - 1:0];
wire[31:0] slave_wdata [count - 1:0];

// assign statements (if any)                          
Crossbar i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.master_req(master_req),
	.master_cmd(master_cmd),
	.slave_ack(slave_ack),
	.master_addr(master_addr),
	.master_wdata(master_wdata),
	.slave_rdata(slave_rdata),
	.master_ack(master_ack),
	.slave_cmd(slave_cmd),
	.master_rdata(master_rdata),
	.slave_addr(slave_addr),
	.slave_wdata(slave_wdata)	
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
    clk = 0;                                                   
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
    #10
	clk = !clk;
//@eachvec;                                              
// --> end                                             
end

initial //first-to-first write
begin
	#15
	master_req[0] = 1;
	master_addr[0] = 32'h0000ABCD;
	master_cmd[0] = 1;
	master_wdata[0] = 32'h1234EF78;
	@(negedge clk);
	@(posedge clk);
	#5
	slave_ack[0] = 1;
	@(negedge clk);
	@(posedge clk);
	master_req[0] = 1'bZ;
	master_addr[0] = 32'hZ;
	master_cmd[0] = 1'bZ;
	master_wdata[0] = 32'hZ;
	@(negedge clk);
	slave_ack[0] = 1'bZ;
	
end

initial //first-to-second read
begin
	#100
	master_req[0] = 1;
	master_addr[0] = 32'hCD568902;
	master_cmd[0] = 0;
	@(negedge clk);
	@(negedge clk);
	slave_ack[1] = 1;
	@(negedge clk);
	slave_rdata[1] = 32'h91827364;
	@(negedge clk);
	master_req[0] = 1'bZ;
	master_addr[0] = 32'hZ;
	master_cmd[0] = 1'bZ;
	slave_ack[1] = 1'bZ;
	slave_rdata[1] = 32'hZ;
end

initial //each-to-each write
begin
	#200
	master_req[0] = 1;
	master_req[1] = 1;
	master_addr[0] = 32'h7354829D;
	master_addr[1] = 32'hCE658934;
	master_cmd[0] = 1;
	master_cmd[1] = 1;
	master_wdata[0] = 32'h45454545;
	master_wdata[1] = 32'h90909090;
	@(negedge clk);
	@(negedge clk);
	slave_ack[0] = 1;
	slave_ack[1] = 1;
	@(negedge clk);
	master_req[0] = 1'bZ;
	master_req[1] = 1'bZ;
	master_addr[0] = 32'hZ;
	master_addr[1] = 32'hZ;
	master_cmd[0] = 1'bZ;
	master_cmd[1] = 1'bZ;
	slave_ack[0] = 1'bZ;
	slave_ack[1] = 1'bZ;
end

initial //each-to-first read
begin
	#300
	master_req[0] = 1;
	master_req[1] = 1;
	master_addr[0] = 32'h12345678;
	master_addr[1] = 32'h12345678;
	master_cmd[0] = 0;
	master_cmd[1] = 0;
	@(negedge clk);
	@(negedge clk);
	slave_ack[0] = 1;
	slave_ack[1] = 1;
	@(negedge clk);
	slave_rdata[0] = 32'hDEFCDEFC;
	slave_rdata[1] = 32'h72357352;
	@(negedge clk);
	master_req[0] = 1'bZ;
	master_req[1] = 1'bZ;
	master_addr[0] = 32'hZ;
	master_addr[1] = 32'hZ;
	master_cmd[0] = 1'bZ;
	master_cmd[1] = 1'bZ;
	#30
	slave_ack[0] = 1'bZ;
	slave_ack[1] = 1'bZ;
	slave_rdata[0] = 32'hZ;
	slave_rdata[1] = 32'hZ;
end
    
endmodule

